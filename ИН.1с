
// псевдокласс ИерархическийНумератор
Функция ИерархическийНумератор_Создать(СтрНумератор="1",Разделитель=".")  Экспорт
	СтрРезультат = Новый Структура();
	СтрРезультат.Вставить("Разделитель",Разделитель);
	СтрРезультат.Вставить("МассивНомеров",Новый Массив());
	СтрокиНомеров = МассивПодстрок(СтрНумератор,СтрРезультат.Разделитель);
	Для Каждого Номер из СтрокиНомеров Цикл 
		СтрРезультат.МассивНомеров.Добавить(Число(Номер));		
	КонецЦикла;
	Возврат СтрРезультат;
КонецФункции

Функция МассивПодстрок(Знач Стр, Разделитель = ",")          
    МассивСтрок = Новый Массив();
    Если Разделитель = " " Тогда
        Стр = СокрЛП(Стр);
        Пока Истина Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = СокрЛ(Сред(Стр,Поз));
        КонецЦикла;
    Иначе
        ДлинаРазделителя = СтрДлина(Разделитель);
        Пока Истина Цикл
            Поз = Найти(Стр,Разделитель);
            Если Поз=0 Тогда
                МассивСтрок.Добавить(Стр);
                Возврат МассивСтрок;
            КонецЕсли;
            МассивСтрок.Добавить(Лев(Стр,Поз-1));
            Стр = Сред(Стр,Поз+ДлинаРазделителя);
        КонецЦикла;
    КонецЕсли;              
КонецФункции// глРазложить

Функция ИерархическийНумератор_Уровень(Нумератор) Экспорт 
	Возврат Нумератор.МассивНомеров.Количество();
КонецФункции
// добавить номер в конец
Процедура  ИерархическийНумератор_Вниз(Нумератор) Экспорт
	Нумератор.МассивНомеров.Добавить(1);
КонецПроцедуры
// убрать номер с конца
Процедура  ИерархическийНумератор_Вверх(Нумератор) Экспорт
	Если Нумератор.МассивНомеров.Количество()>1  Тогда 
		Нумератор.МассивНомеров.Удалить(Нумератор.МассивНомеров.Количество()-1);
	КонецЕсли;
КонецПроцедуры

Функция ИерархическийНумератор_ТекУровень(Нумератор) Экспорт
	Возврат Нумератор.МассивНомеров.Количество();	
КонецФункции
// инкремент текущего номера
Процедура  ИерархическийНумератор_Инкремент(Нумератор) Экспорт 
	Нумератор.МассивНомеров[Нумератор.МассивНомеров.Количество()-1]	= Нумератор.МассивНомеров[Нумератор.МассивНомеров.Количество()-1]+1;
КонецПроцедуры

Процедура  ИерархическийНумератор_Декремент(Нумератор) Экспорт 
	Нумератор.МассивНомеров[Нумератор.МассивНомеров.Количество()-1]	= Нумератор.МассивНомеров[Нумератор.МассивНомеров.Количество()-1]-1;
КонецПроцедуры

Функция КлонироватьСтруктуру(СозданнаяСтруктура) Экспорт 
	КопияСтруктуры = Новый Структура;
	Попытка
		Для Каждого ЭлементСтруктуры Из СозданнаяСтруктура Цикл
			Если (Строка(ТипЗнч(ЭлементСтруктуры.Значение))="Массив") Тогда 
				КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ, КлонироватьМассив(ЭлементСтруктуры.Значение));
			Иначе 
				КопияСтруктуры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Возврат КопияСтруктуры;
	КонецПопытки;
  	Возврат КопияСтруктуры;
КонецФункции

Функция КлонироватьМассив(м1)
	//создаем и наполняем массив
	//выполняем последовательное копирование
	м2 = Новый Массив;
	Для Инд = 0 По м1.ВГраница() Цикл
		Если Строка(ТипЗнч(м1[Инд]))="Массив" Тогда 
			м2.Добавить(КлонироватьМассив(м1[Инд]));
		ИначеЕсли Строка(ТипЗнч(м1[Инд]))="Структура" Тогда 
			м2.Добавить(КлонироватьСтруктуру(м1[Инд]));
		Иначе 
			м2.Добавить(м1[Инд]);
		КонецЕсли;               		
	КонецЦикла;
	Возврат м2;
КонецФункции	
